// Encapsulation du script dans un IIFE pour isoler les variables
(function() {
    // Variables globales encapsul√©es
    let isActive = false;
    let alphaStepIndex = 0; // Renomm√© pour √©viter le conflit

    // Fonction pour journaliser les informations avec un format coh√©rent
    function logInfo(message, data = null) {
        const timestamp = new Date().toISOString().substr(11, 8);
        if (data) {
            console.log(`[${timestamp}] üî∑ AlphaMatchers: ${message}`, data);
        } else {
            console.log(`[${timestamp}] üî∑ AlphaMatchers: ${message}`);
        }
    }

    // Fonction pour afficher une fen√™tre d'erreur avec les erreurs d√©tect√©es
    function showErrorWindow(errors) {
        logInfo("Affichage de la fen√™tre d'erreur");
        
        // Supprimer toute fen√™tre d'erreur existante
        const existingErrorWindow = document.getElementById('t41-error-window');
        if (existingErrorWindow) {
            existingErrorWindow.remove();
        }
        
        // Cr√©er la fen√™tre d'erreur
        const errorWindow = document.createElement('div');
        errorWindow.id = 't41-error-window';
        errorWindow.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 500px;
            max-height: 80vh;
            background-color: white;
            border: 2px solid #FF4136;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            z-index: 10000;
            padding: 20px;
            overflow-y: auto;
        `;
        
        // Cr√©er l'en-t√™te
        const header = document.createElement('div');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        `;
        
        const title = document.createElement('h2');
        title.textContent = 'Erreurs d√©tect√©es dans la fiche';
        title.style.cssText = `
            margin: 0;
            color: #FF4136;
            font-size: 18px;
        `;
        
        const closeButton = document.createElement('button');
        closeButton.textContent = '‚úï';
        closeButton.style.cssText = `
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #555;
        `;
        closeButton.onclick = () => errorWindow.remove();
        
        header.appendChild(title);
        header.appendChild(closeButton);
        errorWindow.appendChild(header);
        
        // Ajouter la liste des erreurs
        const errorList = document.createElement('ul');
        errorList.style.cssText = `
            list-style-type: none;
            padding: 0;
            margin: 0;
        `;
        
        errors.forEach(error => {
            const errorItem = document.createElement('li');
            errorItem.style.cssText = `
                padding: 10px;
                margin-bottom: 8px;
                background-color: #FFF5F5;
                border-left: 4px solid #FF4136;
                font-size: 14px;
            `;
            errorItem.textContent = error;
            errorList.appendChild(errorItem);
        });
        
        errorWindow.appendChild(errorList);
        
        // Ajouter des boutons d'action
        const actionButtons = document.createElement('div');
        actionButtons.style.cssText = `
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
            gap: 10px;
        `;
        
        const continueButton = document.createElement('button');
        continueButton.textContent = 'Ignorer et continuer';
        continueButton.style.cssText = `
            padding: 8px 16px;
            background-color: #DDDDDD;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        `;
        continueButton.onclick = () => {
            errorWindow.remove();
            // Continuer le processus si l'utilisateur choisit d'ignorer
            logInfo("L'utilisateur a choisi d'ignorer les erreurs et de continuer");
            // On pourrait ajouter ici un callback ou un √©v√©nement pour continuer le flux
        };
        
        const fixButton = document.createElement('button');
        fixButton.textContent = 'Corriger les erreurs';
        fixButton.style.cssText = `
            padding: 8px 16px;
            background-color: #FF4136;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        `;
        fixButton.onclick = () => {
            errorWindow.remove();
            logInfo("L'utilisateur a choisi de corriger les erreurs");
            // Rien √† faire ici, l'utilisateur va corriger manuellement
        };
        
        actionButtons.appendChild(continueButton);
        actionButtons.appendChild(fixButton);
        errorWindow.appendChild(actionButtons);
        
        // Ajouter la fen√™tre au document
        document.body.appendChild(errorWindow);
        
        // Retourner la fen√™tre pour permettre des manipulations suppl√©mentaires
        return errorWindow;
    }

    // Fonction principale pour v√©rifier les donn√©es alphanum√©riques
    function verifyAlphaNumericData() {
        logInfo("‚≠ê D√âBUT DE LA V√âRIFICATION DES DONN√âES ALPHANUM√âRIQUES ‚≠ê");

        try {
            // S√©lection s√©curis√©e des champs
            const getValue = (selector) => {
                const element = document.querySelector(selector);
                const found = element ? "‚úÖ trouv√©" : "‚ùå non trouv√©";
                const value = element?.value?.trim() || "";
                logInfo(`√âl√©ment ${selector}: ${found}, valeur: "${value}"`);
                return value;
            };

            logInfo("1Ô∏è‚É£ Extraction des valeurs des champs...");
            const idpp = getValue("#formValidationCorrection\\:identifiantGaspard");
            const typeSaisie = getValue("#formValidationCorrection\\:typeDeSignalisationValue");
            const nom = getValue("#formValidationCorrection\\:nom");
            const prenom = getValue("#formValidationCorrection\\:prenom");
            const serviceInitiateur = getValue("#formValidationCorrection\\:serviceInitiateur");
            const una = getValue("#formValidationCorrection\\:una");
            const ficheEtabliePar = getValue("#formValidationCorrection\\:ficheEtabliePar");
            const serviceRattachement = getValue("#formValidationCorrection\\:serviceRattachement");

            logInfo("R√©sum√© des valeurs extraites:", {
                idpp, typeSaisie, nom, prenom, serviceInitiateur, una, ficheEtabliePar, serviceRattachement
            });

            let errors = [];
            let validationResults = {
                neotest: "Non v√©rifi√©",
                frankDesmis: "Non v√©rifi√©",
                typeSaisie: "Non v√©rifi√©",
                idppCheck: "Non v√©rifi√©",
                serviceInitiateurFormat: "Non v√©rifi√©",
                unaFormat: "Non v√©rifi√©",
                serviceRattachementFormat: "Non v√©rifi√©"
            };

            // 2Ô∏è‚É£ D√©tection des NEO-TESTS
            logInfo("2Ô∏è‚É£ V√©rification des mentions NEO-TEST...");
            const hasNeoTest = [idpp, typeSaisie, nom, prenom, serviceInitiateur, una, ficheEtabliePar, serviceRattachement]
                .some(field => field.toUpperCase().includes("NEOTEST") || field.toUpperCase().includes("NEO-TEST"));
            
            if (hasNeoTest) {
                errors.push("Pr√©sence d'une mention 'NEOTEST' ou 'NEO-TEST' d√©tect√©e.");
                validationResults.neotest = "‚ùå √âCHEC";
                logInfo("‚ùå Test √©chou√©: mention NEO-TEST d√©tect√©e");
            } else {
                validationResults.neotest = "‚úÖ OK";
                logInfo("‚úÖ Test r√©ussi: aucune mention NEO-TEST");
            }

            // V√©rification FRANCK DESMIS
            logInfo("2Ô∏è‚É£ V√©rification du nom 'FRANCK DESMIS'...");
            if (ficheEtabliePar.toUpperCase().includes("FRANCK DESMIS")) {
                errors.push("Fiche √©tablie par 'FRANCK DESMIS' d√©tect√©e.");
                validationResults.frankDesmis = "‚ùå √âCHEC";
                logInfo("‚ùå Test √©chou√©: FRANCK DESMIS d√©tect√©");
            } else {
                validationResults.frankDesmis = "‚úÖ OK";
                logInfo("‚úÖ Test r√©ussi: pas de FRANCK DESMIS");
            }

            // 3Ô∏è‚É£ V√©rification du Type / Type de saisie
            logInfo("3Ô∏è‚É£ V√©rification du type de saisie...");
            if (typeSaisie !== "SM") {
                logInfo("Type de saisie diff√©rent de SM, v√©rification du service de rattachement...");
                if (!/^\d{5}$/.test(serviceRattachement)) {
                    errors.push("Le champ 'Service de rattachement' est obligatoire et doit √™tre un nombre √† 5 chiffres.");
                    validationResults.typeSaisie = "‚ùå √âCHEC";
                    logInfo("‚ùå Test √©chou√©: Service de rattachement invalide");
                } else {
                    validationResults.typeSaisie = "‚úÖ OK";
                    logInfo("‚úÖ Test r√©ussi: Service de rattachement valide");
                }
            } else {
                validationResults.typeSaisie = "‚úÖ OK (Type SM)";
                logInfo("‚úÖ Test ignor√©: Type de saisie = SM");
            }

            // 4Ô∏è‚É£ V√©rification de l'IDPP
            logInfo("4Ô∏è‚É£ V√©rification de l'IDPP...");
            if (idpp) {
                logInfo("IDPP pr√©sent, v√©rification du service initiateur...");
                validationResults.idppCheck = "‚úÖ OK";
                
                if (/CELLULE|DEPARTEMENTALE|D√âPARTEMENTALE/i.test(serviceInitiateur)) {
                    errors.push("Le champ 'Service initiateur' ne doit pas contenir 'CELLULE' ou 'D√âPARTEMENTALE'.");
                    validationResults.serviceInitiateurFormat = "‚ùå √âCHEC";
                    logInfo("‚ùå Test √©chou√©: Service initiateur contient CELLULE ou DEPARTEMENTALE");
                } else {
                    validationResults.serviceInitiateurFormat = "‚úÖ OK";
                    logInfo("‚úÖ Test r√©ussi: Service initiateur valide");
                }
            } else {
                logInfo("IDPP absent, v√©rification des autres champs...");
                validationResults.idppCheck = "‚ùå IDPP manquant";
                
                if (!/\d+/.test(serviceInitiateur)) {
                    errors.push("Le 'Service initiateur' doit contenir du texte et des chiffres.");
                    validationResults.serviceInitiateurFormat = "‚ùå √âCHEC";
                    logInfo("‚ùå Test √©chou√©: Service initiateur doit contenir des chiffres");
                } else {
                    validationResults.serviceInitiateurFormat = "‚úÖ OK";
                    logInfo("‚úÖ Test r√©ussi: Service initiateur contient des chiffres");
                }
                
                if (!/^\d{5}\/\d{5}\/\d{4}$/.test(una)) {
                    errors.push("Le champ 'UNA' doit √™tre au format : 12345/12345/2024.");
                    validationResults.unaFormat = "‚ùå √âCHEC";
                    logInfo("‚ùå Test √©chou√©: Format UNA invalide");
                } else {
                    validationResults.unaFormat = "‚úÖ OK";
                    logInfo("‚úÖ Test r√©ussi: Format UNA valide");
                }
                
                if (!/^\d{5}$/.test(serviceRattachement)) {
                    errors.push("Le champ 'Service de rattachement' est obligatoire et doit √™tre un nombre √† 5 chiffres.");
                    validationResults.serviceRattachementFormat = "‚ùå √âCHEC";
                    logInfo("‚ùå Test √©chou√©: Service de rattachement invalide");
                } else {
                    validationResults.serviceRattachementFormat = "‚úÖ OK";
                    logInfo("‚úÖ Test r√©ussi: Service de rattachement valide");
                }
            }

            // Mise en √©vidence des champs avec erreurs
            if (errors.length > 0) {
                logInfo("Mise en √©vidence des champs avec erreurs...");
                highlightErrorFields(validationResults);
            }

            // Affichage du r√©sum√© des v√©rifications
            logInfo("üìä R√âSUM√â DES V√âRIFICATIONS:", validationResults);

            // Affichage des erreurs
            if (errors.length > 0) {
                logInfo(`‚ùå √âCHEC DE LA VALIDATION: ${errors.length} erreur(s) d√©tect√©e(s)`, errors);
                showErrorWindow(errors);
                return false;
            }

            logInfo("‚úÖ VALIDATION R√âUSSIE: Toutes les donn√©es sont conformes");
            return true;
        } catch (error) {
            logInfo(`üî¥ ERREUR TECHNIQUE: ${error.message}`, error);
            showErrorWindow(["Erreur technique lors de la v√©rification: " + error.message]);
            return false;
        }
    }

    // Fonction pour mettre en √©vidence les champs avec erreurs
    function highlightErrorFields(validationResults) {
        try {
            // R√©initialiser les styles pr√©c√©dents
            const allFields = [
                "#formValidationCorrection\\:identifiantGaspard",
                "#formValidationCorrection\\:typeDeSignalisationValue",
                "#formValidationCorrection\\:serviceInitiateur",
                "#formValidationCorrection\\:una",
                "#formValidationCorrection\\:ficheEtabliePar",
                "#formValidationCorrection\\:serviceRattachement"
            ];
            
            allFields.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) {
                    element.style.border = "";
                    element.style.backgroundColor = "";
                    
                    // Supprimer l'indicateur d'erreur existant s'il y en a un
                    const errorIndicator = document.querySelector(`${selector}-error-indicator`);
                    if (errorIndicator) {
                        errorIndicator.remove();
                    }
                }
            });
            
            // Appliquer les styles d'erreur
            if (validationResults.neotest === "‚ùå √âCHEC" || validationResults.frankDesmis === "‚ùå √âCHEC") {
                highlightField("#formValidationCorrection\\:ficheEtabliePar");
            }
            
            if (validationResults.typeSaisie === "‚ùå √âCHEC" || validationResults.serviceRattachementFormat === "‚ùå √âCHEC") {
                highlightField("#formValidationCorrection\\:serviceRattachement");
            }
            
            if (validationResults.serviceInitiateurFormat === "‚ùå √âCHEC") {
                highlightField("#formValidationCorrection\\:serviceInitiateur");
            }
            
            if (validationResults.unaFormat === "‚ùå √âCHEC") {
                highlightField("#formValidationCorrection\\:una");
            }
            
            logInfo("Mise en √©vidence des champs termin√©e");
        } catch (error) {
            logInfo(`Erreur lors de la mise en √©vidence des champs: ${error.message}`, error);
        }
    }

    // Fonction pour mettre en √©vidence un champ sp√©cifique
    function highlightField(selector) {
        const element = document.querySelector(selector);
        if (element) {
            // Sauvegarder les styles originaux
            const originalBorder = element.style.border;
            const originalBackground = element.style.backgroundColor;
            
            // Appliquer les styles d'erreur
            element.style.border = "2px solid #FF4136";
            element.style.backgroundColor = "#FFF5F5";
            
            // Ajouter un indicateur d'erreur
            const parent = element.parentNode;
            const errorIndicator = document.createElement("div");
            errorIndicator.id = `${selector.replace(/[\\:]/g, '')}-error-indicator`;
            errorIndicator.innerHTML = "‚ö†Ô∏è";
            errorIndicator.style.cssText = `
                display: inline-block;
                margin-left: 8px;
                color: #FF4136;
                font-size: 16px;
            `;
            parent.appendChild(errorIndicator);
            
            // Ajouter une info-bulle sur l'indicateur d'erreur
            errorIndicator.title = "Ce champ contient une erreur";
            
            logInfo(`Champ mis en √©vidence: ${selector}`);
        } else {
            logInfo(`Champ introuvable pour mise en √©vidence: ${selector}`);
        }
    }

    // Fonction pour activer le script
    function activateScript() {
        isActive = true;
        alphaStepIndex = 0;
        
        logInfo("üöÄ ACTIVATION DU SCRIPT ALPHAMATCHERS");
        logInfo("Script activ√© et pr√™t √† ex√©cuter les v√©rifications");
        
        // V√©rification imm√©diate des donn√©es
        logInfo("Lancement de la v√©rification des donn√©es...");
        const result = verifyAlphaNumericData();
        if (result) {
            logInfo("‚úÖ‚úÖ‚úÖ DONN√âES VALID√âES AVEC SUCC√àS ‚úÖ‚úÖ‚úÖ");
            // Si les donn√©es sont valides, on peut continuer avec la s√©quence normale
            // Par exemple, en envoyant un message au contentScript pour poursuivre
            return true;
        } else {
            logInfo("‚ùå‚ùå‚ùå √âCHEC DE LA VALIDATION DES DONN√âES ‚ùå‚ùå‚ùå");
            return false;
        }
    }

    // Fonction pour d√©sactiver le script
    function deactivateScript() {
        isActive = false;
        logInfo("Script d√©sactiv√©");
        
        // Informer le background script que le script a √©t√© arr√™t√©
        browser.runtime.sendMessage({
            command: "scriptShutdownComplete",
            script: "alphaMatchers"
        }).catch(error => {
            console.error("Erreur lors de l'envoi du message d'arr√™t:", error);
        });
    }

    // √âcouter les messages du background script et du popup
    browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
        logInfo("Message re√ßu dans alphaMatchers.js:", message);
        
        if (message.command === "startScript" && message.script === "alphaMatchers") {
            logInfo("Commande de d√©marrage re√ßue");
            const result = activateScript();
            sendResponse({ success: true, result });
            return true;
        }
        else if (message.command === "stopScript" && message.script === "alphaMatchers") {
            logInfo("Commande d'arr√™t re√ßue");
            deactivateScript();
            sendResponse({ success: true });
            return true;
        }
        else if (message.command === "checkAlphaNumeric") {
            logInfo("Commande de v√©rification des donn√©es alphanum√©riques re√ßue");
            const result = verifyAlphaNumericData();
            sendResponse({ success: true, result });
            return true;
        }
    });

    // Initialisation automatique si le script est charg√© directement
    if (document.readyState === "complete" || document.readyState === "interactive") {
        logInfo("Script charg√© directement, initialisation...");
        
        // Nous ne lan√ßons pas automatiquement la v√©rification ici pour √©viter les interf√©rences
        // avec le flux normal de l'extension
        
        // Envoyer un message pour indiquer que le script est pr√™t
        browser.runtime.sendMessage({
            type: "SCRIPT_READY",
            script: "alphaMatchers"
        }).catch(error => {
            console.error("Erreur lors de l'envoi du message d'initialisation:", error);
        });
    } else {
        // Attendre que le document soit compl√®tement charg√©
        document.addEventListener("DOMContentLoaded", () => {
            logInfo("Document charg√©, script pr√™t");
            
            // Envoyer un message pour indiquer que le script est pr√™t
            browser.runtime.sendMessage({
                type: "SCRIPT_READY",
                script: "alphaMatchers"
            }).catch(error => {
                console.error("Erreur lors de l'envoi du message d'initialisation:", error);
            });
        });
    }

    // Export pour les tests (adapt√© pour fonctionner en module et en IIFE)
    if (typeof window !== 'undefined') {
        // Exposer les fonctions sur window pour les tests dans le navigateur
        window.alphaMatchers = {
            verifyAlphaNumericData,
            showErrorWindow,
            highlightErrorFields,
            highlightField,
            activateScript,
            deactivateScript
        };
    } else if (typeof module !== 'undefined' && module.exports) {
        // Export pour les tests Node.js
        module.exports = {
            verifyAlphaNumericData,
            showErrorWindow,
            highlightErrorFields,
            highlightField,
            activateScript,
            deactivateScript
        };
    }
})(); // Fin de l'IIFE
